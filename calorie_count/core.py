# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['input_body_parameters', 'calculate_bmr_amr']

# Cell
def input_body_parameters(message_dict):
    input_values = [170, 56, 41,'m', 1]
    body_params = {}
    n = range(len(message_dict))
    zipped = zip(message_dict.keys(), n)
    assert len(input_values) == len(message_dict)
    for param, nr in zipped:
        if param =='gender':
            try:
                body_params[param] = input(message_dict[param])
            except:
                body_params[param] = input_values[nr]
            assert body_params[param] == 'w' or body_params[param] == 'm', 'gender value should be w or m'
        else:
            try:
                body_params[param] = int(input(message_dict[param]))
            except:
                body_params[param] = input_values[nr]
            assert type(body_params[param]) == int, 'Please provide positive integers'
            assert body_params[param] > 0, 'Please provide a positive value'
        body_params[param] = body_params[param]
        print(f'Your {param} is {body_params[param]}')
    return body_params

def calculate_bmr_amr(body_parameters):

    dict_activity = {1:1.2, 2:1.37, 3:1.55, 4:1.725, 6:1.9}

    if body_parameters['gender'] == 'w':
        bmr = float(655.1 + (9.563 * body_parameters['weight']) +
         (1.850 * body_parameters['height']) -
         (4.676 * body_parameters['age']))
    else:
        bmr = float(66.47 + (13.75 * body_parameters['weight']) +
        (5.003 * body_parameters['height']) -
        (6.755 * body_parameters['age']))

    print(f'Your BMR is {bmr:.1f} \n')

    amr = bmr * dict_activity[body_parameters['activity']]
    print(f'To stay at your current weight you need to consume {amr:.2f} calories')
    return bmr, amr