# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['input_body_parameters', 'calculate_bmr_amr', 'calculate_burned_calories']

# Cell
def input_body_parameters(message_dict):
    """returns a dictionary with user input of body parameters:
        height, weight, age, gender and activity level

    :param message_dict: a dictionary with body parameters as keys and message for user as values
    :type message_dict: dict

    :raises AssertError: if inputs of type int are negative
    :raises AssertError: if inputs of type string are not 'w' or 'm'

    :rtype: int
    :return: multiplication of all arguments
    """
    input_values = [170, 56, 41,'m', 1]
    body_params = {}
    n = range(len(message_dict))
    zipped = zip(message_dict.keys(), n)
    assert len(input_values) == len(message_dict)
    for param, nr in zipped:
        if param =='gender':
            try:
                body_params[param] = input(message_dict[param])
            except:
                body_params[param] = input_values[nr]
            assert body_params[param] == 'w' or body_params[param] == 'm', 'gender value should be w or m'
        else:
            try:
                body_params[param] = int(input(message_dict[param]))
            except:
                body_params[param] = input_values[nr]
            assert body_params[param] > 0, 'Please provide a positive value'

        body_params[param] = body_params[param]

        print(f'Your {param} is {body_params[param]}')
    return body_params


def calculate_bmr_amr(body_parameters):
    """
    returns basal metabolic rate(bmr) and active metabolic rate (amr)

    source for the formulas used for calculations: https://www.verywellfit.com/how-many-calories-do-i-need-each-day-2506873

    :param body_parameters
    :type body_parameters: dict

    :return bmr
    :rtype float
    :return amr
    :rtype float
    """
    dict_activity = {1:1.2, 2:1.37, 3:1.55, 4:1.725, 6:1.9}

    if body_parameters['gender'] == 'w':
        bmr = float(655.1 + (9.563 * body_parameters['weight']) +
            (1.850 * body_parameters['height']) -
            (4.676 * body_parameters['age']))
    else:
        bmr = float(66.47 + (13.75 * body_parameters['weight']) +
            (5.003 * body_parameters['height']) -
            (6.755 * body_parameters['age']))

    amr = bmr * dict_activity[body_parameters['activity']]
    return bmr, amr


def calculate_burned_calories(body_parameters):
    """
    returns the amount of calories burned during activity and during the day apart of activity

    To calculate calories for specific activity its MET value is chosen from the table.
    To assign MET user should type in the name of her activity for the search.
    If user doesn't provide this information, activity is considered to be standing and light effort with MET of 1.4
    Calories burned during rest of the day are calculated with standard MET of 1.2.

    :param body_parameters
    :type body_parameters: dict

    :return burned_cal
    :rtype float
    :return bmr_cal
    :rtype float

    """

    met_list = pandas.read_csv('data/met_list_activities.csv',
                            sep=';',
                            encoding='ANSI',
                            decimal=',',
                            error_bad_lines=False)
    nr = 0
    met = 0
    time = 0
    your_act = ''
    while met == 0:
        try:
            your_act = input('Type in the activity you were doing today:')
        except:
            your_act = 'standing, light effort tasks'
        # cheking, if the typed activity is in the list of activities
        if len(met_list[met_list['SPECIFIC MOTION'].str.contains(your_act)]) > 1:
            print('\n', met_list[met_list['SPECIFIC MOTION'].str.contains(your_act)])
            try:
                nr = int(input('\nSelect MET of your activity from the list'))
            except:
                nr = 176
            #met = float(met_list['METs'].iloc[nr])
            #activity = met_list['SPECIFIC MOTION'].iloc[nr]
        elif len(met_list[met_list['SPECIFIC MOTION'].str.contains(your_act)]) == 0:
            print('Please type again')
        elif len(met_list[met_list['SPECIFIC MOTION'].str.contains(your_act)]) == 1:
            nr = met_list[met_list['SPECIFIC MOTION'].str.contains(your_act)].index
        met = float(met_list['METs'].iloc[nr])
        activity = met_list['SPECIFIC MOTION'].iloc[nr]
    try:
        time = int(input('Type in the time of your activity for today in minutes:'))
    except:
        time = 30

    burned_cal = met * body_parameters['weight'] * time/60
    bmr_cal = 1.2 * body_parameters['weight'] * (24 - time / 60)
    print(f'\nDuring {time} min of {activity} you burned {burned_cal:.0f} kcal.')
    print(f'Your total daily energy expenditure was {round((burned_cal + bmr_cal), 2):.0f} kcal today')
    return burned_cal, bmr_cal